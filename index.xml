<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VC-2022-2</title><link>https://computacion-visual-2022-2.github.io/vc_page/</link><description>Recent content on VC-2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://computacion-visual-2022-2.github.io/vc_page/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://computacion-visual-2022-2.github.io/vc_page/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://computacion-visual-2022-2.github.io/vc_page/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://computacion-visual-2022-2.github.io/vc_page/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</guid><description>Coloring # Problem statement # Using shaders, we can apply color to a texture or a shape through P5JS and apply different effects to the enviroment.
In this exercise, we want to apply shaders in order to create or simulate different blending modes that are popular on regular image processing Apps.
The way we can apply the different blending modes we want to do, is through playing with the mathematical formula involving the values of the vertex and the sliders and colors we can input.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</guid><description>Texturing # Problem statement # Textures gives renders of 2d and 3d shapes colors and form, they are used in 3D modellin, video games and other fields of computing to give visual elemnt colors, shapes and effects.
Through the use of shaders, we can take a set of coordinates of a shape and apply to them textures and colors.
The application of the shader upon the shape can be changed through playing with the coordinates of the vertex, we will this knowledge on the exercises below Exercise 1</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</guid><description>Image Processing # Problem statement # Exercise
Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask. A magnifier tool. Integrate luma and other coloring brightness tools. Background # Code # Code Image Processing .js let theShader; let img; let input; let select_mask, select_brightness, select_type; let mask_value = 0; let region, magnifier; let coloring_tool = &amp;#39;None&amp;#39;; let coloring_tool_value = 0; let vid; let cam; function preload() { theShader = readShader(&amp;#39;/vc_page/sketches/shaders/image/shader.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</guid><description>Procedural Texturing # Problem statement # Exercise
Adapt other patterns from the book of shaders and map them as textures onto other 3D shapes.
Background # Code # Code Procedural Texturing .js let pg; let truchetShader, brickShader,colorShader; let theShader; let selectShader; let selectShape; let shapeValue = 0; function preload() { // shader adapted from here: https://thebookofshaders.com/09/ truchetShader = readShader(&amp;#39;/vc_page/sketches/shaders/procedural/truchet.frag&amp;#39;, { matrices: Tree.NONE, varyings: Tree.NONE }); brickShader = readShader(&amp;#39;/vc_page/sketches/shaders/procedural/brick.frag&amp;#39;, { matrices: Tree.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</guid><description>Lighting # Problem statement # Exercises
Implement a scene having the following lighting equation: a = ambient ambient4, where ambient4 is the ambient light color.
Background # Code # Code Lighting .js let easycam; let ambientShader; let items; let trange; let lightSlider; let itemsSlider; let color_picker; let colorValue; function preload() { ambientShader = readShader(&amp;#39;/vc_page/sketches/shaders/lighting/ambient.frag&amp;#39;, {varyings: Tree.NONE,}); } function setup() { createCanvas(400, 400, WEBGL); colorMode(RGB, 1); // easycam stuff let state = { distance: 250, // scalar center: [0, 0, 0], // vector rotation : [-0.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop1/illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop1/illusions/</guid><description>Illusions # Primrose Field # Problem Statement # Study, implement and discuss possible applications of some known visual phenomena and optical illusions.
Background # The &amp;ldquo;Primrose&amp;rsquo;s Field&amp;rdquo; optical illusion was created and designed by Akiyoshi Kitaoka, who was a professor of psychology in Ristumeikan University who dedicates his work to the study and dissemination of perception and optical illusions. Kitaoka&amp;rsquo;s best known illusion and one of the most popular illusions of the genre is &amp;ldquo;Rotsnake&amp;rdquo; which is based on the Fraser-Wilcox illusion and has been widely used (not always with permission) in publishing and advertising.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop1/masking/</guid><description>Visual masking # Convolution masks # Problem Statement # Implement an image processing web app supporting different image kernels and supporting:
Image histogram visualization. Different lightness (coloring brightness) tools. Background # Kernel # Convolution, Kernel or Mask is an image processing technique in which an odd-sized matrix is used to achieve effects such as sharpening, blurring or enhancement. These masks are achieved by convolution between a kernel and an image, changing the intensity of a pixel to reflect the intensities of the surrounding piexels.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop2/solar_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/workshop2/solar_system/</guid><description>Coordinate Spaces # 3D Application # Problem Statement # Implement a 3d webgl application. The p5.treegl or any other libraries may be used.
Background # Solar System # The solar system is a planetary system located in the Milky Way galaxy, and its center is a star we call the Sun. Around its mass, nine planets, 60 satellites and countless asteroids and comets revolve. Of those planets seven have satellites.</description></item></channel></rss>