<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VC-2022-2</title><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/</link><description>Recent content on VC-2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</guid><description>Coloring # Problem statement # Using shaders, we can apply color to a texture or a shape through P5JS and apply different effects to the enviroment.
In this exercise, we want to apply shaders in order to create or simulate different blending modes that are popular on regular image processing Apps.
The way we can apply the different blending modes we want to do, is through playing with the mathematical formula involving the values of the vertex and the sliders and colors we can input.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</guid><description>Texturing # Problem statement # Textures gives renders of 2d and 3d shapes colors and form, they are used in 3D modellin, video games and other fields of computing to give visual elemnt colors, shapes and effects.
Through the use of shaders, we can take a set of coordinates of a shape and apply to them textures and colors.
The application of the shader upon the shape can be changed through playing with the coordinates of the vertex, we will this knowledge on the exercises below Exercise 1</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</guid><description>Image Processing # Problem statement # Exercise
Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask. A magnifier tool. Integrate luma and other coloring brightness tools. Background # Code # Code Image Processing .js let theShader; let img; let input; let select_mask, select_brightness, select_type; let mask_value = 0; let region, magnifier; let coloring_tool = &amp;#39;None&amp;#39;; let coloring_tool_value = 0; let vid; let cam; function preload() { theShader = readShader(&amp;#39;/vc_page/sketches/shaders/image/shader.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</guid><description>Procedural Texturing # Problem statement # Exercise
Adapt other patterns from the book of shaders and map them as textures onto other 3D shapes.
Background # A procedural texture is a texture created using a mathematical description like an algorithm rather than directly stored data. The advantage of this approach is low storage cost, unlimited texture resolution and easy texture mapping. These kinds of textures are often used to model surface or volumetric representations of natural elements such as wood, marble, granite, metal, stone, and others.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</guid><description>Lighting # Problem statement # Exercises
Implement a scene having the following lighting equation: a = ambient ambient4, where ambient4 is the ambient light color.
Background # Ambient light # An ambient light source represents an omni-directional, fixed-intensity and fixed-color light source that affects all objects in the scene equally (is omni-present). During rendering, all objects in the scene are brightened with the specified intensity and color. This type of light source is mainly used to provide the scene with a basic view of the different objects in it.</description></item></channel></rss>