<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VC-2022-2</title><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/</link><description>Recent content on VC-2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/1._coloring/</guid><description> Coloring # Problem statement # Exercises
Figure it out the js code of the sketches. Implement other blending modes. Background # Code # Code Coloring //Code Conclusions # References #</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/2._texturing/</guid><description>Texturing # Problem statement # Exercise 1
Redefine the shape texture coordinates to turn the above image upside down.
Exercises 2
Include the blue channel in the uv visualization (e.g., use blue with red or green channels). Use other shapes different than the quad as screen filters. Exercises 3
Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. Implement texture tinting by mixing color and texel interpolated data.</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/3._image_processing/</guid><description> Image Processing # Problem statement # Exercise
Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask. A magnifier tool. Integrate luma and other coloring brightness tools. Background # Code # Code Coloring //Code Conclusions # References #</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/4._procedural_texturing/</guid><description> Procedural Texturing # Problem statement # Exercise
Adapt other patterns from the book of shaders and map them as textures onto other 3D shapes.
Background # Code # Code Procedural Texturing //Code Conclusions # References #</description></item><item><title/><link>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacion-visual-2022-2.github.io/vc_page/docs/contenido/shaders/5._lighting/</guid><description> Lighting # Problem statement # Exercises
Implement a scene having the following lighting equation: a = ambient ambient4, where ambient4 is the ambient light color.
Background # Code # Code Lighting //Code Conclusions # References #</description></item></channel></rss>